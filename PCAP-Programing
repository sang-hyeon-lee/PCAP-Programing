#include <stdlib.h>
#include <stdio.h>
#include <pcap.h>
#include <arpa/inet.h>

struct ethheader {
  u_char  ether_dhost[6]; /* destination host address */
  u_char  ether_shost[6]; /* source host address */
  u_short ether_type;     /* protocol type (IP, ARP, RARP, etc) */
};

/* IP Header */
struct ipheader {
  unsigned char      iph_ihl:4, //IP header length
                     iph_ver:4; //IP version
  unsigned char      iph_tos; //Type of service
  unsigned short int iph_len; //IP Packet length (data + header)
  unsigned short int iph_ident; //Identification
  unsigned short int iph_flag:3, //Fragmentation flags
                     iph_offset:13; //Flags offset
  unsigned char      iph_ttl; //Time to Live
  unsigned char      iph_protocol; //Protocol type
  unsigned short int iph_chksum; //IP datagram checksum
  struct  in_addr    iph_sourceip; //Source IP address
  struct  in_addr    iph_destip;   //Destination IP address
};

struct tcpheader {
    u_short tcp_sport;               // source port
    u_short tcp_dport;               // destination port
    u_int   tcp_seq;                 // sequence number
    u_int   tcp_ack;                 // acknowledgement number
    u_char  tcp_offx2;               // data offset, rsvd
    u_char  tcp_flags;
#define TH_FIN  0x01
#define TH_SYN  0x02
#define TH_RST  0x04
#define TH_PUSH 0x08
#define TH_ACK  0x10
#define TH_URG  0x20
#define TH_ECE  0x40
#define TH_CWR  0x80
#define TH_FLAGS        (TH_FIN|TH_SYN|TH_RST|TH_ACK|TH_URG|TH_ECE|TH_CWR)
    u_short tcp_win;                 // window
    u_short tcp_sum;                 // checksum
    u_short tcp_urp;                 // urgent pointer
};

void pcap_handler_callback(u_char *args, const struct pcap_pkthdr *header,
                              const u_char *packet)
{
  struct ethheader *eth = (struct ethheader *)packet;
  struct ipheader *ip = (struct ipheader *)(packet + sizeof(struct ethheader));
  struct tcpheader *tcp = (struct tcpheader *)(packet + sizeof(struct ethheader) + ip->iph_ihl * 4);
  int tcp_data_length = header->len - (sizeof(struct ethheader) + ip->iph_ihl * 4 + tcp->tcp_offx2 * 4);

  if (ntohs(eth->ether_type) == 0x0800) { // 0x0800 is IP type
    struct ipheader * ip = (struct ipheader *)
                           (packet + sizeof(struct ethheader)); 

    printf("       From IP: %s\n", inet_ntoa(ip->iph_sourceip));
    printf("       From Port: %d\n", ntohs(tcp->tcp_sport));
    printf("       From MAC: ");
    for (int i = 0; i < 6; ++i) {
        printf("%02X", eth->ether_dhost[i]); // 각 바이트를 16진수로 출력
        if (i < 5) {
            printf(":"); // 각 바이트 사이에 콜론을 출력하여 MAC 주소 형식을 유지
        }
    }
    printf("\n");
    printf("         To IP: %s\n", inet_ntoa(ip->iph_destip));
    printf("         To Port: %d\n", ntohs(tcp->tcp_dport));
    printf("         To Mac: ");
    for (int i = 0; i < 6; ++i) {
      printf("%02X", eth->ether_shost[i]); // 각 바이트를 16진수로 출력
      if (i < 5) {
            printf(":"); // 각 바이트 사이에 콜론을 출력하여 MAC 주소 형식을 유지
        }
    }
    printf("\n");
    printf("TCP Data\n");
      for (int i = 0; i < tcp_data_length; i++) {
        printf("%c", packet[sizeof(struct ethheader) + ip->iph_ihl * 4 + tcp->tcp_offx2 * 4 + i]);
      }
    printf("\n\n");    
    /* determine protocol */
    switch(ip->iph_protocol) {                                 
        case IPPROTO_TCP:
            printf("   Protocol: TCP\n");
            return;
        case IPPROTO_UDP:
            printf("   Protocol: UDP\n");
            return;
        case IPPROTO_ICMP:
            printf("   Protocol: ICMP\n");
            return;
        default:
            printf("   Protocol: others\n");
            return;
    }
  }
}
                              
int main(){
    pcap_t *handle;
    char errbuf[PCAP_ERRBUF_SIZE];

    handle = pcap_open_live("eth0", BUFSIZ, 1, 1000, errbuf);
    struct bpf_program fp;
    char filter_exp[] = "tcp";
    bpf_u_int32 net;
    if (pcap_compile(handle, &fp, filter_exp, 0, net) == -1) {
        fprintf(stderr, "Error compiling filter expression\n");
        return 1;
    }
    if (pcap_setfilter(handle, &fp) == -1) {
        fprintf(stderr, "Error setting filter\n");
        return 1;
    }
    pcap_loop(handle, 0, pcap_handler_callback, NULL);

    pcap_close(handle);

    return 0;
}
